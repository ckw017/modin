name: ci
on: pull_request
  test-api:
    runs-on: ubuntu-latest
    name: test api
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - uses: conda-incubator/setup-miniconda@v2
        with:
          activate-environment: modin
          environment-file: environment-dev.yml
          python-version: 3.7
          channel-priority: strict
          use-only-tar-bz2: true # IMPORTANT: This needs to be set for caching to work properly!
      - name: Conda environment
        # `shell: bash -l {0}` - special way to activate modin environment
        shell: bash -l {0}
        run: |
          conda info
          conda list
      - run: sudo apt update && sudo apt install -y libhdf5-dev
      - name: Api tests
        shell: bash -l {0}
        run: python -m pytest modin/pandas/test/test_api.py
      - name: Backends Api tests
        shell: bash -l {0}
        run: python -m pytest modin/test/test_backends_api.py

  test-headers:
    runs-on: ubuntu-latest
    name: test-headers
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - uses: conda-incubator/setup-miniconda@v2
        with:
          activate-environment: modin
          environment-file: environment-dev.yml
          python-version: 3.7
          channel-priority: strict
          use-only-tar-bz2: true # IMPORTANT: This needs to be set for caching to work properly!
      - name: Conda environment
        shell: bash -l {0}
        run: |
          conda info
          conda list
      - name: Headers tests
        shell: bash -l {0}
        run: python -m pytest modin/test/test_headers.py

  test-clean-install-ubuntu:
    runs-on: ubuntu-latest
    name: test-clean-install-ubuntu
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - uses: actions/setup-python@v2
        with:
          python-version: "3.7.x"
          architecture: "x64"
      - name: Clean install and run
        shell: bash -l {0}
        run: |
          python -m pip install -e .[all]
          MODIN_ENGINE=dask python -c "import modin.pandas as pd; print(pd.DataFrame([1,2,3]))"
          MODIN_ENGINE=ray python -c "import modin.pandas as pd; print(pd.DataFrame([1,2,3]))"

  test-clean-install-windows:
    runs-on: windows-latest
    name: test-clean-install-windows
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - uses: actions/setup-python@v2
        with:
          python-version: "3.7.x"
          architecture: "x64"
      - name: Clean install and run
        shell: bash -l {0}
        run: |
          python -m pip install -e .[all]
          MODIN_ENGINE=dask python -c "import modin.pandas as pd; print(pd.DataFrame([1,2,3]))"
          MODIN_ENGINE=ray python -c "import modin.pandas as pd; print(pd.DataFrame([1,2,3]))"

  test-ray-client:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -l {0}
    strategy:
      matrix:
        python-version: ["3.7", "3.8"]
    env:
      MODIN_ENGINE: ray
      MODIN_MEMORY: 1000000000
      TEST_RAY_CLIENT: True
    name: test-ubuntu (engine ray-client), python ${{matrix.python-version}})
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - uses: conda-incubator/setup-miniconda@v2
        with:
          activate-environment: modin
          environment-file: environment-dev.yml
          python-version: ${{matrix.python-version}}
          channel-priority: strict
          use-only-tar-bz2: true # IMPORTANT: This needs to be set for caching to work properly!
      - name: Conda environment
        shell: bash -l {0}
        run: |
          conda info
          conda list
      - name: Install HDF5
        run: sudo apt update && sudo apt install -y libhdf5-dev
      - run: pip install ray==1.3
      - run: MODIN_BENCHMARK_MODE=True pytest modin/pandas/test/internals/test_benchmark_mode.py
      - run: pytest -n 2 modin/experimental/xgboost/test/test_default.py
      - run: pytest -n 2 modin/pandas/test/dataframe/test_binary.py
      - run: pytest -n 2 modin/pandas/test/dataframe/test_default.py
      - run: pytest -n 2 modin/pandas/test/dataframe/test_indexing.py
      - run: pytest -n 2 modin/pandas/test/dataframe/test_iter.py
      - run: pytest -n 2 modin/pandas/test/dataframe/test_join_sort.py
      - run: pytest -n 2 modin/pandas/test/dataframe/test_map_metadata.py
      - run: pytest -n 2 modin/pandas/test/dataframe/test_reduction.py
      - run: pytest -n 2 modin/pandas/test/dataframe/test_udf.py
      - run: pytest -n 2 modin/pandas/test/dataframe/test_window.py
      - run: pytest -n 2 modin/pandas/test/dataframe/test_pickle.py
      - run: python -m pytest -n 2 modin/pandas/test/test_series.py
      - run: python -m pytest -n 2 modin/pandas/test/test_rolling.py
      - run: python -m pytest modin/pandas/test/test_concat.py # Ray and Dask versions fails with -n 2
      - run: python -m pytest -n 2 modin/pandas/test/test_groupby.py
      - run: python -m pytest -n 2 modin/pandas/test/test_reshape.py
      - run: python -m pytest -n 2 modin/pandas/test/test_general.py
      - run: python -m pytest modin/pandas/test/test_io.py
      - run: python -m pytest modin/experimental/pandas/test/test_io_exp.py
      - run: pip install dfsql && pytest modin/experimental/sql/test/test_sql.py
      - run: |
          curl -o codecov https://codecov.io/bash
          VERSION=$(grep -o 'VERSION=\"[0-9\.]*\"' codecov | cut -d'"' -f2);
          curl -o SHA512SUM "https://raw.githubusercontent.com/codecov/codecov-bash/${VERSION}/SHA512SUM"
          if sha512sum -c --ignore-missing --status SHA512SUM; then
              bash ./codecov
          else
              echo 'CORRUPTED CODECOV SCRIPT!!!'
              exit 10
          fi
